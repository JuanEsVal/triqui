{"version":3,"sources":["index.js"],"names":["Square","value","onClick","className","Board","props","renderSquare","i","squares","FunctionalGame","useState","Array","fill","history","setHistory","stepNumber","setStepNumber","xIsNext","setXIsNext","localHistory","current","winner","calculateWinner","moves","map","step","move","desc","jumpTo","status","slice","length","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"4LAIMA,EAAS,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,QACtB,OAAS,yBAAQC,UAAY,SAASD,QAAaA,EAA1C,eAAwDD,EAAxD,QAGLG,EAAQ,SAAAC,GACZ,IAAMC,EAAe,SAACC,GACpB,OACI,cAACP,EAAD,CACIC,MAAOI,EAAMG,QAAQD,GACrBL,QAAY,kBAAMG,EAAMH,QAAQK,OAIxC,OACE,gCACE,sBAAKJ,UAAU,YAAf,UACGG,EAAa,GACbA,EAAa,GACbA,EAAa,MAEhB,sBAAKH,UAAU,YAAf,UACGG,EAAa,GACbA,EAAa,GACbA,EAAa,MAEhB,sBAAKH,UAAU,YAAf,UACGG,EAAa,GACbA,EAAa,GACbA,EAAa,UAMlBG,EAAiB,SAAAJ,GACrB,MAA8BK,mBAAU,CAAE,CAAEF,QAAQG,MAAM,GAAGC,KAAK,SAAlE,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAoCJ,mBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAA8BN,oBAAS,GAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KA2BQC,EAAeN,EACfO,EAAUD,EAAaJ,GACvBM,EAASC,EAAgBF,EAAQZ,SAEjCe,EAAQJ,EAAaK,KAAI,SAACC,EAAMC,GACpC,IAAMC,EAAOD,EACX,eAAiBA,EACjB,mBACF,OACE,6BACE,wBAAQxB,QAAS,kBAhBV,SAACuB,GACdT,EAAeS,GACfP,EAAaO,EAAO,IAAO,GAcEG,CAAOF,IAA9B,SAAsCC,KAD/BD,MAMTG,EAAS,GAOb,OALEA,EADER,EACO,WAAaA,EAEX,iBAAmBJ,EAAU,IAAM,KAI9C,sBAAKd,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAACC,EAAD,CACEI,QAAUY,EAAQZ,QAClBN,QAnDU,SAACK,GACnB,IAAMY,EAAeN,EAAQiB,MAAO,EAAGf,EAAa,GAE9CP,EADUW,EAAcA,EAAaY,OAAS,GAC5BvB,QAAQsB,QAC7BR,EAAgBd,IAAYA,EAAQD,KAIvCC,EAAQD,GAAKU,EAAU,IAAM,IAI7BH,EAAW,GAAD,mBAAOK,GAAP,CAAqB,CAACX,cAChCQ,EAAeG,EAAaY,QAC5Bb,GAAaD,SAwCT,sBAAKd,UAAU,YAAf,UACE,8BAAO0B,IACP,6BAAMN,WAahB,SAASD,EAAgBd,GAYvB,IAXA,IAAMwB,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGAzB,EAAI,EAAGA,EAAIyB,EAAMD,OAAQxB,IAAK,CACrC,kBAAkByB,EAAMzB,GAAxB,GAAO0B,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAI3B,EAAQyB,IAAMzB,EAAQyB,KAAOzB,EAAQ0B,IAAM1B,EAAQyB,KAAOzB,EAAQ2B,GACpE,OAAO3B,EAAQyB,GAGnB,OAAO,KAvBTG,IAASC,OACP,cAAC5B,EAAD,IACA6B,SAASC,eAAe,W","file":"static/js/main.c2e14da6.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst Square = ({value, onClick}) => {\n  return ( <button className = \"square\" onClick = {  onClick }>  { value } </button> );\n}\n\nconst Board = props => {\n  const renderSquare = (i) => {\n    return ( \n        <Square \n            value={props.squares[i]}\n            onClick = { () => props.onClick(i)}\n        />\n    );\n  }\n    return (\n      <div>\n        <div className=\"board-row\">\n          {renderSquare(0)}\n          {renderSquare(1)}\n          {renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {renderSquare(3)}\n          {renderSquare(4)}\n          {renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {renderSquare(6)}\n          {renderSquare(7)}\n          {renderSquare(8)}\n        </div>\n      </div>\n    );\n}\n\nconst FunctionalGame = props => {\n  const [history, setHistory] = useState( [ { squares:Array(9).fill(null) } ]  );\n  const [stepNumber, setStepNumber] = useState(0);\n  const [xIsNext, setXIsNext] = useState(true);  \n\n\n  const handleClick = (i) => {\n    const localHistory = history.slice( 0, stepNumber + 1 );\n    const current = localHistory[ localHistory.length - 1 ];\n    const squares = current.squares.slice();\n    if(calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    \n    squares[i] = xIsNext ? \"X\" : \"O\";\n\n    //setHistory( localHistory.concat([ {  squares: squares } ]) ); \n    //Sprit operator ...\n    setHistory( [ ...localHistory, {squares} ]); \n    setStepNumber( localHistory.length );\n    setXIsNext( !xIsNext );\n   \n  }\n\n  const jumpTo = (step) => {\n    setStepNumber( step );\n    setXIsNext( (step % 2) === 0);\n  }\n\n  \n    const localHistory = history;\n    const current = localHistory[stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    const moves = localHistory.map((step, move) => {\n      const desc = move ?\n        'Go to move #' + move :\n        'Go to game start';\n      return (\n        <li key={move}>\n          <button onClick={() => jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    });\n\n    let status = '';\n    if (winner) {\n      status = \"Winner: \" + winner;\n    } else {\n        status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={ current.squares }\n            onClick={ handleClick }\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{ status }</div>\n          <ol>{ moves }</ol>\n        </div>\n       </div>\n    );\n}    \n\n// ========================================\n\nReactDOM.render(\n  <FunctionalGame />, \n  document.getElementById(\"root\"),\n  );\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}"],"sourceRoot":""}